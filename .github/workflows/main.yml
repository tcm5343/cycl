name: main

on:
  pull_request:
    types: ['opened']
    branches: ['main']
  push:
  workflow_dispatch:
    inputs:
      deploy-e2e-infra:
        type: boolean
        description: If

env:
  PYTHONPATH: './src:./test'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::929185124050:role/github-deployment-role
          role-session-name: github-actions-deployment

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: print
        run: |
          pwd
          ls

      - name: Install Python dependencies and CDK
        working-directory: e2e
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          npm install -g aws-cdk

      # - name: cdk synth acyclic
      #   working-directory: e2e
      #   run: cdk synth

      - name: cdk deploy
        working-directory: e2e
        run: cdk deploy AcyclicStage/** --ci --require-approval never

      - name: cdk destroy
        working-directory: e2e
        run: cdk destroy AcyclicStage/** --ci

  # vars:
  #   permissions:
  #     contents: read
  #   runs-on: ubuntu-latest
  #   outputs:
  #     is_push_to_main: ${{ steps.set-vars.outputs.is_push_to_main }}
  #   steps:
  #     - id: set-vars
  #       run: |
  #         is_push_to_main='false'
  #         if [[ "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}" && "${{ github.event_name }}" == "push" ]]; then
  #           is_push_to_main='true'
  #         fi
  #         echo "is_push_to_main=${is_push_to_main}" >> $GITHUB_OUTPUT

  # code-quality:
  #   needs: vars
  #   permissions:
  #     contents: read
  #   runs-on: 'ubuntu-latest'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'
  #         cache: 'pip'

  #     - name: validate
  #       run: make validate

  # unit-tests:
  #   needs: vars
  #   permissions:
  #     contents: read
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: ['ubuntu-latest']
  #       python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: 'pip'

  #     - name: setup tox
  #       run: pip install tox

  #     - name: test
  #       run: |
  #         TOXENV="py$(echo ${{ matrix.python-version }} | sed 's/\.//')"
  #         tox -e "${TOXENV}"

  # build:
  #   needs: [vars, code-quality, unit-tests]
  #   uses: ./.github/workflows/build.yml
  #   secrets: inherit
  #   permissions:
  #     contents: write  # needed for tag creation
  #     id-token: write   # needed for publishing to PyPI
  #   with:
  #     deploy-prod: ${{ needs.vars.outputs.is_push_to_main == 'true' }}

  # deploy:
  #   if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
  #   needs: [vars, build]
  #   uses: ./.github/workflows/deploy.yml
  #   secrets: inherit
  #   permissions:
  #     contents: write
  #     pages: write      # to deploy to Pages
  #     id-token: write   # to verify the deployment originates from an appropriate source
  #   with:
  #     deploy-prod: ${{ needs.vars.outputs.is_push_to_main == 'true' }}
