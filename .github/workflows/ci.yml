name: CI

on:
  pull_request:
    types:
      - closed
    branches: ['master', 'main']
  push:
    # branches: ['master', 'main']
  workflow_dispatch: 

env:
  PYTHONPATH: './src:./test'

jobs:
  validation:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: setup tox
        run: pip install tox

      - name: test
        run: |
          TOXENV="py$(echo ${{ matrix.python-version }} | sed 's/\.//')"
          tox -e "${TOXENV}"

  release-test:
    # if: github.event.pull_request.merged == true
    needs: validation
    uses: ./.github/workflows/release_rwf.yml
    permissions:
      contents: write  # needed for tag creation
    with:
      pre-release: "true"
      python-version: "3.11"
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  build-docs:
    needs: release-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip'

      - name: Restore cached venv
        id: restore-cache
        uses: actions/cache/restore@v3
        with:
          path: ./.venv
          key: ${{ runner.os }}-doc-venv-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          ./.venv/bin/python -m pip install .[doc]

      - name: Cache venv
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ./.venv
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      - name: Sphinx build
        run: ./.venv/bin/sphinx-build docs docs/_build --builder html --fresh-env

      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/
  
  deploy-docs:          
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  dist-test:
    # if: github.event.pull_request.merged == true
    needs: release-test
    uses: ./.github/workflows/build_dist_rwf.yml
    with:
      tag: "${{ needs.release-test.outputs.tag }}"
      python-version: "3.11"
      dist-artifact-prefix: "test"
      
  # build-test-dist:
  #   needs: release-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
          
  #     - name: Checkout the tagged version
  #       run: git checkout refs/tags/${{ needs.release-test.outputs.tag }}

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.11
  #         cache: 'pip'

  #     - name: Restore cached venv
  #       id: restore-cache
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: ./.venv
  #         key: ${{ runner.os }}-dist-venv-${{ hashFiles('**/pyproject.toml') }}

  #     - name: Install build dependencies
  #       if: steps.restore-cache.outputs.cache-hit != 'true'
  #       run: |
  #         python -m venv .venv
  #         ./.venv/bin/python -m pip install .[dist]

  #     - name: Cache venv
  #       if: steps.restore-cache.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v3
  #       with:
  #         path: ./.venv
  #         key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  #     - name: Build distribution
  #       run: ./.venv/bin/python -m build

  #     - name: Upload distribution artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-pypi-dist
  #         path: dist/
  #         retention-days: 7  

  deploy-test:
    needs: dist-test
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://test.pypi.org/p/cycl
    permissions:
      id-token: write   # needed for publishing to PyPI
    steps:
      - name: Download built distribution
        uses: actions/download-artifact@v4
        with:
          name: "${{ needs.dist-test.outputs.artifact-id }}"
          path: dist/
      
      - name: Publish distribution
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc  # v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
